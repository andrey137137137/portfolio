const nodemailer = require('nodemailer');
const { waterfall } = require('async');
const router = require('express').Router();
const Model = require('mongoose').model('comment');

const { isAuth } = require('@auth');
const crud = require('@contr/crud');
const { waterfallCB } = require('@contr/image');

router.get('/:for', (req, res) => {
  const sort = { date: 1 };
  const filter = {};

  if (req.params.for == 'front') {
    filter.isPublished = true;
  }

  crud.getItems(Model, res, sort, { filter });
});

router.post('/', isAuth, (req, res) => {
  const { author, position, description } = req.body;
  const EMAIL_FROM = req.body.email;

  const { createBundleRenderer } = require('vue-server-renderer');
  const { IS_DEV } = require('@apiHelpers');

  function createRenderer(bundle, options) {
    return createBundleRenderer(
      bundle,
      Object.assign(options, {
        // recommended for performance
        runInNewContext: false,
      }),
    );
  }

  const callbacks = [
    cb => {
      crud.createItem(
        Model,
        res,
        {
          author,
          position,
          email: EMAIL_FROM,
          description,
        },
        cb,
      );
    },
  ];

  if (IS_DEV) {
    callbacks.push((context, cb) => {
      console.log(context);
      // In development: setup the dev server with watch and hot-reload,
      // and create a new renderer on bundle update.
      require('./setup-dev-server')(context, cb);
    });
    callbacks.push(({ context, bundle, options }, cb) => {
      createRenderer(bundle, options).renderToString(context, cb);
    });
  } else {
    callbacks.push((context, cb) => {
      console.log(context);
      // In production: create server renderer using built server bundle.
      // The server bundle is generated by vue-ssr-webpack-plugin.
      const renderer = createRenderer(
        '/mailTemplate/vue-ssr-server-bundle.json',
        {},
      );
      renderer.renderToString(context, cb);
    });
  }

  callbacks.push((html, cb) => {
    console.log(html);
    const { EMAIL, PASSWORD } = require('@config').smtp;
    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: EMAIL,
        pass: PASSWORD,
      },
      tls: { rejectUnauthorized: false },
    });
    transporter.sendMail(
      {
        from: EMAIL_FROM,
        to: EMAIL,
        subject: 'Portfolio comment',
        text: 'This message was sent from Node js server.',
        html,
      },
      cb,
    );
  });

  waterfall(callbacks, (err, result) => {
    console.log(err);
    console.log(result);
    return waterfallCB(err, result, res, 'insert');
  });
});

router.put('/:id', isAuth, (req, res) => {
  const { author, position, email, description, isPublished } = req.body;
  crud.updateItem(Model, res, req.params.id, {
    author,
    position,
    description,
    email,
    isPublished,
  });
});

router.delete('/:id', isAuth, (req, res) => {
  crud.deleteItem(Model, res, req.params.id);
});

module.exports = router;
